/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Jgyh } from "./Jgyh";
import { JgyhCountArgs } from "./JgyhCountArgs";
import { JgyhFindManyArgs } from "./JgyhFindManyArgs";
import { JgyhFindUniqueArgs } from "./JgyhFindUniqueArgs";
import { DeleteJgyhArgs } from "./DeleteJgyhArgs";
import { JgyhService } from "../jgyh.service";
@graphql.Resolver(() => Jgyh)
export class JgyhResolverBase {
  constructor(protected readonly service: JgyhService) {}

  async _jgyhsMeta(
    @graphql.Args() args: JgyhCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Jgyh])
  async jgyhs(@graphql.Args() args: JgyhFindManyArgs): Promise<Jgyh[]> {
    return this.service.jgyhs(args);
  }

  @graphql.Query(() => Jgyh, { nullable: true })
  async jgyh(@graphql.Args() args: JgyhFindUniqueArgs): Promise<Jgyh | null> {
    const result = await this.service.jgyh(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Jgyh)
  async deleteJgyh(@graphql.Args() args: DeleteJgyhArgs): Promise<Jgyh | null> {
    try {
      return await this.service.deleteJgyh(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
