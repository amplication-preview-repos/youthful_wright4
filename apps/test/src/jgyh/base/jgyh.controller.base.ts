/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JgyhService } from "../jgyh.service";
import { JgyhCreateInput } from "./JgyhCreateInput";
import { Jgyh } from "./Jgyh";
import { JgyhFindManyArgs } from "./JgyhFindManyArgs";
import { JgyhWhereUniqueInput } from "./JgyhWhereUniqueInput";
import { JgyhUpdateInput } from "./JgyhUpdateInput";

export class JgyhControllerBase {
  constructor(protected readonly service: JgyhService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Jgyh })
  async createJgyh(@common.Body() data: JgyhCreateInput): Promise<Jgyh> {
    return await this.service.createJgyh({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Jgyh] })
  @ApiNestedQuery(JgyhFindManyArgs)
  async jgyhs(@common.Req() request: Request): Promise<Jgyh[]> {
    const args = plainToClass(JgyhFindManyArgs, request.query);
    return this.service.jgyhs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Jgyh })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jgyh(
    @common.Param() params: JgyhWhereUniqueInput
  ): Promise<Jgyh | null> {
    const result = await this.service.jgyh({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Jgyh })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJgyh(
    @common.Param() params: JgyhWhereUniqueInput,
    @common.Body() data: JgyhUpdateInput
  ): Promise<Jgyh | null> {
    try {
      return await this.service.updateJgyh({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Jgyh })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJgyh(
    @common.Param() params: JgyhWhereUniqueInput
  ): Promise<Jgyh | null> {
    try {
      return await this.service.deleteJgyh({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
